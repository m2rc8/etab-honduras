<?php

namespace Proxies\__CG__\MINSAL\IndicadoresBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Vpindicador extends \MINSAL\IndicadoresBundle\Entity\Vpindicador implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'id', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'idindicador', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'descripcion', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'periodo', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'estado', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'pintar', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'tipo'];
        }

        return ['__isInitialized__', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'id', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'idindicador', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'descripcion', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'periodo', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'estado', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'pintar', '' . "\0" . 'MINSAL\\IndicadoresBundle\\Entity\\Vpindicador' . "\0" . 'tipo'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Vpindicador $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function reverseTransform($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'reverseTransform', [$value]);

        return parent::reverseTransform($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescripcion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescripcion', []);

        return parent::getDescripcion();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescripcion($descripcion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescripcion', [$descripcion]);

        return parent::setDescripcion($descripcion);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriodo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriodo', []);

        return parent::getPeriodo();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeriodo($periodo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeriodo', [$periodo]);

        return parent::setPeriodo($periodo);
    }

    /**
     * {@inheritDoc}
     */
    public function getEstado()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEstado', []);

        return parent::getEstado();
    }

    /**
     * {@inheritDoc}
     */
    public function setEstado($estado)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEstado', [$estado]);

        return parent::setEstado($estado);
    }

    /**
     * {@inheritDoc}
     */
    public function getPintar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPintar', []);

        return parent::getPintar();
    }

    /**
     * {@inheritDoc}
     */
    public function setPintar($pintar)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPintar', [$pintar]);

        return parent::setPintar($pintar);
    }

    /**
     * {@inheritDoc}
     */
    public function getFalse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFalse', []);

        return parent::getFalse();
    }

    /**
     * {@inheritDoc}
     */
    public function setFalse($estado)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFalse', [$estado]);

        return parent::setFalse($estado);
    }

    /**
     * {@inheritDoc}
     */
    public function getTipo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTipo', []);

        return parent::getTipo();
    }

    /**
     * {@inheritDoc}
     */
    public function setTipo($tipo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTipo', [$tipo]);

        return parent::setTipo($tipo);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdindicador()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdindicador', []);

        return parent::getIdindicador();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdindicador($idindicador)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdindicador', [$idindicador]);

        return parent::setIdindicador($idindicador);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
